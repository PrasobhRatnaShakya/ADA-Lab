#include <stdio.h>
#include <stdlib.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int findMobile(int n, int arr[], int dir[]) {
    int mobile = 0, prevMobile = 0;
    for (int i = 0; i < n; i++) {
        if (dir[i] == -1 && i != 0 && arr[i] > arr[i - 1]) {
            mobile = arr[i];
            if (mobile > prevMobile)
                prevMobile = mobile;
        } else if (dir[i] == 1 && i != n - 1 && arr[i] > arr[i + 1]) {
            mobile = arr[i];
            if (mobile > prevMobile)
                prevMobile = mobile;
        }
    }
    return prevMobile;
}

int findPosition(int n, int arr[], int mobile) {
    for (int i = 0; i < n; i++)
        if (arr[i] == mobile)
            return i;
    return -1;
}

void printArray(int n, int arr[]) {
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

void johnsonTrotter(int n) {
    int arr[n];
    int dir[n];

    for (int i = 0; i < n; i++) {
        arr[i] = i + 1;
        dir[i] = -1;
    }

    printArray(n, arr);

    int mobile = 0;
    while (1) {
        mobile = findMobile(n, arr, dir);
        if (mobile == 0)
            break;
        int pos = findPosition(n, arr, mobile);

        if (dir[pos] == -1) {
            swap(&arr[pos], &arr[pos - 1]);
            swap(&dir[pos], &dir[pos - 1]);
        } else if (dir[pos] == 1) {
            swap(&arr[pos], &arr[pos + 1]);
            swap(&dir[pos], &dir[pos + 1]);
        }

        for (int i = 0; i < n; i++) {
            if (arr[i] > mobile)
                dir[i] = (dir[i] == -1) ? 1 : -1;
        }
        printArray(n, arr);
    }
}

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    if (n <= 0) {
        printf("Number of elements must be positive.\n");
        return 1;
    }
    johnsonTrotter(n);
    return 0;
}

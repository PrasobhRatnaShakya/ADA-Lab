#include <stdio.h>
#include <stdlib.h>


int max(int a, int b) {
    return (a > b) ? a : b;
}

int knapsack(int capacity, int weights[], int values[], int n) {
    int i, w;

    int K[n + 1][capacity + 1];

    for (i = 0; i <= n; i++) {
        for (w = 0; w <= capacity; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0; 
            else if (weights[i - 1] <= w)
                K[i][w] = max(values[i - 1] + K[i - 1][w - weights[i - 1]], K[i - 1][w]);
            else
                K[i][w] = K[i - 1][w];
        }
    }
    return K[n][capacity];
}

int main() {
    int capacity;
    int n;

    printf("Enter the number of items: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Number of items must be positive.\n");
        return 1;
    }

    int values[n];    
    int weights[n];  
r
    printf("Enter the values and weights of the items:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d: Value: ", i + 1);
        scanf("%d", &values[i]);
        printf("        Weight: ");
        scanf("%d", &weights[i]);
        if(weights[i] <= 0 || values[i] < 0){
            printf("Invalid weight or value. Weight must be positive and value must be non-negative.\n");
            return 1;
        }
    }

    printf("Enter the maximum capacity of the knapsack: ");
    scanf("%d", &capacity);
    if(capacity <= 0){
        printf("Capacity must be positive.\n");
        return 1;
    }
    int maxValue = knapsack(capacity, weights, values, n);

    printf("Maximum value that can be put in the knapsack: %d\n", maxValue);

    return 0;
}

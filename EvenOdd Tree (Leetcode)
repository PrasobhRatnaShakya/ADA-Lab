Even Odd Tree(Medium problem)

A binary tree is named Even-Odd if it meets the following conditions:

The root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.
For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).
For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).
Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.

Solution:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
#define MAX_QUEUE_SIZE 100000

bool isEvenOddTree(struct TreeNode* root) {
    if (!root) {
        return true;
    }

    struct TreeNode** queue = (struct TreeNode**)malloc(sizeof(struct TreeNode*) * MAX_QUEUE_SIZE);
    if (!queue) {
        perror("Memory allocation failed");
        return false;
    }

    int head = 0;
    int tail = 0;
    queue[tail++] = root;
    int level = 0;

    while (head < tail) {
        int levelSize = tail - head;
        int previousVal = -1;

        for (int i = 0; i < levelSize; i++) {
            struct TreeNode* currentNode = queue[head++];

            if (level % 2 == 0) {
                if (currentNode->val % 2 == 0) {
                    free(queue);
                    return false;
                }
                if (i > 0 && currentNode->val <= previousVal) {
                    free(queue);
                    return false;
                }
            } else { 
                if (currentNode->val % 2 != 0) {
                    free(queue);
                    return false;
                }
                if (i > 0 && currentNode->val >= previousVal) {
                    free(queue);
                    return false;
                }
            }
            previousVal = currentNode->val;

            if (currentNode->left) {
                queue[tail++] = currentNode->left;
            }
            if (currentNode->right) {
                queue[tail++] = currentNode->right;
            }
        }
        level++;
    }

    free(queue);
    return true;
}
